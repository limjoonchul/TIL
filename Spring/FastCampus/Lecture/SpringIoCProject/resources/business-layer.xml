<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">


    <!-- IoC 빈 등록 설정  -->
    <!-- <bean id="boardService" class="com.rubypapper.biz.board.BoardServiceImpl">
          <constructor-arg ref="boardDAO"></constructor-arg>
    </bean> -->
    
    <!-- IoC 애노테이션으로 할거면 이걸 사용해야 한다.  -->
    <context:component-scan base-package="com.rubypapper.biz"></context:component-scan>
    
    
    
    <!-- AOP 애노테이션 설정  -->
    <aop:aspectj-autoproxy></aop:aspectj-autoproxy>
    
    
    
    
    <!--AOP 직접 빈등록해서 사용하는 방법.  -->
<!--     
    AOP 빈을 먼저 등록
    <bean id="log" class="com.rubypapper.biz.common.PrintAdvice"></bean>
    <bean id="afterReturning" class="com.rubypapper.biz.common.AfterReturning"></bean>
    <bean id="afterThrowing" class="com.rubypapper.biz.common.AfterThrowing"></bean>
    <bean id="around" class="com.rubypapper.biz.common.AroundAdvice"></bean>
       
    <aop:config>
        <aop:pointcut id="allPointcut" expression="execution(* com.rubypapper.biz..*Impl.*(..))" />
        <aop:pointcut id="getPointcut" expression="execution(* com.rubypapper.biz..*Impl.get*(..))" />
        <aop:aspect ref="log">
          <aop:before pointcut-ref="allPointcut" method="printLog" />
        </aop:aspect> 

        <aop:aspect ref="afterReturning">
           <aop:after-returning pointcut-ref="getPointcut" method="afterReturningLog" returning="returnObj"/>
        </aop:aspect>
        
        <aop:aspect ref="afterThrowing">
           <aop:after-throwing pointcut-ref="allPointcut" method="afterThrowingLog" throwing="exception"/>
        </aop:aspect>
        리터닝과 스로잉 의 값은 어드바이스 클래스의 파라미터 변수명을 그대로 사용해야 한다. 
        
        <aop:aspect ref="around">
           <aop:around pointcut-ref="getPointcut" method="aroundLog"/>
        </aop:aspect>
    </aop:config> -->
    
    <!-- DAO 빈 등록 -->
    <!-- <bean id="boardDAO" class="com.rubypapper.biz.board.BoardDAOJDBC"></bean> -->
    <bean class="com.rubypapper.biz.board.BoardDAOSpring"></bean>
    <bean class="com.rubypapper.biz.user.UserDAOSpring"></bean>
    
    <!-- JDBCTemplate 빈 등록  -->
    <bean class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    
    <!-- DataSource 설정  -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="org.h2.Driver"></property>
        <property name="url"             value="jdbc:h2:tcp://localhost/~/test"></property>
        <property name="username"        value="sa"></property>
        <property name="password"        value=""></property>
    </bean>
    

</beans>
